name: Xcode - Build and Analyze

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    name: Build and analyse default scheme using xcodebuild command
    runs-on: macos-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Use Node.js 16
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: "yarn"


      - name: Install Node modules
        run: yarn ci
  
      - name: Setup Ruby (bundle)
        uses: ruby/setup-ruby@v1
        with:
            ruby-version: 2.6
            bundler-cache: true

      - name: Restore Pods cache
        uses: actions/cache@v3
        with:
            path: |
              ios/Pods
              ~/Library/Caches/CocoaPods
              ~/.cocoapods
              key: ${{ runner.os }}-pods-${{ hashFiles('ios/Podfile.lock') }}
              restore-keys: |
              ${{ runner.os }}-pods-

      - name: Install pod dependencies
        run: cd ios && pod install

      - name: Set Default Scheme
        run: |
          scheme_list=$(xcodebuild -list -json | tr -d "\n")
          default=$(echo $scheme_list | ruby -e "require 'json'; puts JSON.parse(STDIN.gets)['project']['targets'][0]")
          echo $default | cat >default
          echo Using default scheme: $default
      - name: Build
        env:
          scheme: ${{ 'default' }}
        run: |
          if [ $scheme = default ]; then scheme=$(cat default); fi
          if [ "`ls -A | grep -i \\.xcworkspace\$`" ]; then filetype_parameter="workspace" && file_to_build="`ls -A | grep -i \\.xcworkspace\$`"; else filetype_parameter="project" && file_to_build="`ls -A | grep -i \\.xcodeproj\$`"; fi
          file_to_build=`echo $file_to_build | awk '{$1=$1;print}'`
          xcodebuild clean build analyze -scheme "$scheme" -"$filetype_parameter" "$file_to_build" | xcpretty && exit ${PIPESTATUS[0]}
